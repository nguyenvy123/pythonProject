from telegram import Bot, Update, BotCommand
from telegram.error import TelegramError
from apscheduler.schedulers.blocking import BlockingScheduler
from apscheduler.triggers.cron import CronTrigger
from datetime import datetime
import pytz
import logging
import json

from telegram.ext import Updater, CommandHandler, CallbackContext

# --- C·∫•u h√¨nh ---
BOT_TOKEN = '7696186849:AAHUow8NJaYAkR1Zyminds-Sh5juF0MLY2U'
GROUP_CHAT_ID = -4040600344  # Thay b·∫±ng ID group c·ªßa b·∫°n

# --- Kh·ªüi t·∫°o bot v√† scheduler ---
bot = Bot(token=BOT_TOKEN)
scheduler = BlockingScheduler()
updater = Updater(token=BOT_TOKEN, use_context=True)
dispatcher = updater.dispatcher

# --- Bi·∫øn ƒë·ªÉ l∆∞u message_id c·ªßa poll ---
message_id = None

# --- ƒê·ªçc danh s√°ch users t·ª´ file ---
def load_members():
    try:
        with open('members.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return []  # N·∫øu file kh√¥ng t·ªìn t·∫°i, tr·∫£ v·ªÅ danh s√°ch r·ªóng

# --- L∆∞u danh s√°ch users v√†o file ---
def save_members():
    with open('members.json', 'w', encoding='utf-8') as f:
        json.dump(members_to_tag, f, ensure_ascii=False, indent=4)

# Danh s√°ch c√°c ng√†y trong tu·∫ßn b·∫±ng ti·∫øng Vi·ªát
days_of_week = {
    0: 'Th·ª© Hai',
    1: 'Th·ª© Ba',
    2: 'Th·ª© T∆∞',
    3: 'Th·ª© NƒÉm',
    4: 'Th·ª© S√°u',
    5: 'Th·ª© B·∫£y',
    6: 'Ch·ªß Nh·∫≠t'
}

# --- Danh s√°ch members ƒë·ªÉ tag ---
members_to_tag = load_members()

# --- H√†m g·ª≠i poll ---
def send_poll(context: CallbackContext = None):
    global message_id
    try:
        # L·∫•y ng√†y hi·ªán t·∫°i
        today = datetime.now()
        day_of_week = today.weekday()  # S·ªë th·ª© trong tu·∫ßn (0-6)
        today_date = today.strftime("%d/%m/%Y")  # Format ng√†y th√°ng nƒÉm

        # L·∫•y t√™n ng√†y t·ª´ danh s√°ch
        week_day_name = days_of_week[day_of_week]

        # T·∫°o c√¢u h·ªèi v·ªõi ng√†y
        question = f"ƒêi·ªÉm danh h√¥m nay {week_day_name}, {today_date} nh√©?"
        # G·ª≠i poll
        message = bot.send_poll(
            chat_id=GROUP_CHAT_ID,
            question=question,
            options=["‚úÖ C√≥", "‚ùå Kh√¥ng"],
            is_anonymous=False,
            allows_multiple_answers=False
        )
        message_id = message.message_id  # L∆∞u message_id ƒë·ªÉ ƒë√≥ng poll sau
        # Pin message sau khi g·ª≠i poll
        bot.pin_chat_message(chat_id=GROUP_CHAT_ID, message_id=message_id, disable_notification=True)
        print(f"ƒê√£ g·ª≠i poll v√† pin message_id: {message_id}")

        # G·ª≠i tag all th√†nh vi√™n
        if members_to_tag:
            batch_size = 5
            for i in range(0, len(members_to_tag), batch_size):
                batch = members_to_tag[i:i + batch_size]
                tag_message = " ".join(batch)
                bot.send_message(chat_id=GROUP_CHAT_ID, text=tag_message)

    except TelegramError as e:
        print(f"L·ªói khi g·ª≠i poll: {e}")

# --- H√†m ƒë√≥ng poll ---
def close_poll():
    global message_id
    try:
        if message_id:
            bot.stop_poll(chat_id=GROUP_CHAT_ID, message_id=message_id)
            print("ƒê√£ ƒë√≥ng poll.")
        else:
            print("Kh√¥ng t√¨m th·∫•y message_id ƒë·ªÉ ƒë√≥ng poll.")
    except TelegramError as e:
        print(f"L·ªói khi ƒë√≥ng poll: {e}")

# --- Handler cho l·ªánh /start ---
def start_command(update: Update, context: CallbackContext):
    if update.effective_chat.id == GROUP_CHAT_ID:
        send_poll()
    else:
        print(f"Kh√¥ng ƒë√∫ng group, b·ªè qua chat id: {update.effective_chat.id}")


# --- Handler cho l·ªánh /add ---
def add_users(update: Update, context: CallbackContext):
    if update.effective_chat.id != GROUP_CHAT_ID:
        return

    new_users = context.args  # L·∫•y danh s√°ch c√°c tham s·ªë sau /add
    added_users = []

    for user in new_users:
        if user.startswith("@") and user not in members_to_tag:
            members_to_tag.append(user)
            added_users.append(user)

    if added_users:
        save_members()  # L∆∞u l·∫°i danh s√°ch v√†o file
        update.message.reply_text(f"ƒê√£ th√™m: {' '.join(added_users)}")
    else:
        update.message.reply_text("Kh√¥ng c√≥ user m·ªõi h·ª£p l·ªá ƒë·ªÉ th√™m.")

# --- Handler cho l·ªánh /help ---
def help_command(update: Update, context: CallbackContext):
    if update.effective_chat.id != GROUP_CHAT_ID:
        return

    help_text = (
        "üìã *Danh s√°ch l·ªánh c·ªßa bot:*\n"
        "/start - G·ª≠i poll ƒëi·ªÉm danh ngay l·∫≠p t·ª©c.\n"
        "/add @username1 @username2 - Th√™m c√°c username v√†o danh s√°ch tag khi g·ª≠i poll.\n"
        "/help - Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n n√†y.\n"
    )
    update.message.reply_text(help_text, parse_mode='Markdown')

def set_bot_commands():
    commands = [
        BotCommand("start", "G·ª≠i poll ƒëi·ªÉm danh ngay l·∫≠p t·ª©c"),
        BotCommand("add", "Th√™m username v√†o danh s√°ch tag"),
        BotCommand("help", "Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng bot")
    ]
    try:
        bot.set_my_commands(commands)
        print("ƒê√£ thi·∫øt l·∫≠p danh s√°ch l·ªánh cho bot.")
    except TelegramError as e:
        print(f"L·ªói khi thi·∫øt l·∫≠p danh s√°ch l·ªánh: {e}")
# --- G√°n handler ---
dispatcher.add_handler(CommandHandler('start', start_command))
dispatcher.add_handler(CommandHandler('add', add_users))
dispatcher.add_handler(CommandHandler('help', help_command))
# --- L√™n l·ªãch ---
timezone = pytz.timezone('Asia/Ho_Chi_Minh')

scheduler.add_job(
    send_poll,
    CronTrigger(hour=9, minute=00, day_of_week='mon,wed,fri', timezone=timezone)
)

scheduler.add_job(
    close_poll,
    CronTrigger(hour=17, minute=30, day_of_week='mon,wed,fri', timezone=timezone)
)

# --- Log ---
logging.basicConfig()
# --- B·∫Øt ƒë·∫ßu bot ---
set_bot_commands()
updater.start_polling()
# scheduler.start()
updater.idle()
